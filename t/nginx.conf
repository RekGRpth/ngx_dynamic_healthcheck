worker_processes  1;

error_log  logs/error.log  info;
error_log  logs/debug.log  debug;
pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
  lua_package_cpath "lib/lua/5.1/?.so;;debug/clibs/?.so;;";

  healthcheck fall=2 rise=2 interval=60 timeout=10000;
  healthcheck_request_uri GET /ping;
  healthcheck_persistent healthcheck;

  healthcheck_disable_host 127.0.2.1:9000;
  healthcheck_disable_host 127.0.2.1:9001;

  server {
    listen 8888;
    location /dynamic {
      dynamic_upstream;
    }
    location /healthcheck/get {
      healthcheck_get;
    }
    location /healthcheck/get/lua {
      content_by_lua_block {
        local cjson = require "cjson"
        local hc = require "ngx.healthcheck"
        local hc_stream = require "ngx.healthcheck.stream"
        if ngx.var.arg_stream then
          resp, err = hc_stream.get(ngx.var.arg_upstream)
        else
          resp, err = hc.get(ngx.var.arg_upstream)
        end
        if resp then
          ngx.say(cjson.encode(resp))
        else
          ngx.say(err)
        end
      }
    }
    location /healthcheck/status/lua {
      content_by_lua_block {
        local cjson = require "cjson"
        local hc = require "ngx.healthcheck"
        local hc_stream = require "ngx.healthcheck.stream"
        local resp, err
        if ngx.var.arg_stream then
          resp, err = hc_stream.status(ngx.var.arg_upstream)
        else
          resp, err = hc.status(ngx.var.arg_upstream)
        end
        if resp then
          ngx.say(cjson.encode(resp))
        else
          ngx.say(err)
        end
      }
    }
    location /healthcheck/status {
      healthcheck_status;
    }
    location /healthcheck/update {
      healthcheck_update;
    }
    location /healthcheck/update/lua {
      content_by_lua_block {
        local cjson = require "cjson"
        local hc = require "ngx.healthcheck"
        local hc_stream = require "ngx.healthcheck.stream"
        local opts = {
            type = tonumber(ngx.var.arg_type),
            fall = tonumber(ngx.var.arg_fall),
            rise = tonumber(ngx.var.arg_rise),
            timeout = tonumber(ngx.var.arg_timeout),
            interval = tonumber(ngx.var.arg_interval),
            keepalive = tonumber(ngx.var.arg_keepalive),
            command = {
              uri = ngx.var.arg_uri,
              method = ngx.var.arg_method,
              headers = ngx.var.arg_headers,
              body = ngx.var.arg_body,
              expected = {
                codes = ngx.var.arg_codes,
                body = ngx.var.arg_response_body
              }
            },
            off = tonumber(ngx.var.arg_off),
            disabled = tonumber(ngx.var.arg_disable)
        }
        local resp, err
        if ngx.var.arg_stream then
          resp, err = hc_stream.update(ngx.var.arg_upstream, opts)
        else
          resp, err = hc.update(ngx.var.arg_upstream, opts)
        end
        if resp then
          ngx.say(cjson.encode(resp))
        else
          ngx.say(err)
        end
      }
    }
  }

  upstream a {
    zone a 128k;
    server 127.0.0.1:9000 down;
    server 127.0.1.1:9000 down;
    server 127.0.2.1:9000 down backup;
    check type=http fall=2 rise=1 keepalive=10 interval=10 timeout=10000;
    check_request_uri GET /health;
    check_request_body ping;
    check_response_body pong;
    check_request_headers a=1 b=2;
    check_response_codes 200 204 201;
  }

  upstream b {
    zone b 128k;
    server 127.0.0.1:9001 down;
    server 127.0.1.1:9001 down;
    server 127.0.2.1:9001 down;
    check fall=2 rise=1 keepalive=10 interval=10 timeout=10000;
    check_response_codes 204;
    check_persistent off;
  }

  upstream c {
    zone c 128k;
    server 127.0.0.1:9002 down;
    server 127.0.1.1:9002 down;
    server 127.0.2.1:9002 down;
    check fall=2 rise=1 keepalive=10 interval=10 timeout=10000;
    check_disable_host 127.0.2.1:9002;
    check_disable_host 127.0.1.1:9002;
  }

    upstream backends {
        zone zone_for_backends1 128k;
        dns_update 5s;
        server 127.0.0.1:6001;
        server 127.0.0.1:6002;
        server localhost:6003;
    }

    upstream mail {
        zone mail 128k;
        dns_update 10s;
        dns_ipv6 off;
        server mail.ru down;
        check fall=2 rise=2 interval=10 timeout=10000;
    }

    upstream yandex {
        zone yandex 128k;
        dns_update 10s;
        dns_ipv6 off;
        server yandex.ru;
    }

    upstream google {
        zone google 128k;
        dns_update 10s;
        dns_ipv6 off;
        dns_add_down on;
        server google.com down;
        check fall=2 rise=2 interval=10 timeout=10000 type=http;
        check_request_uri GET /;
    }
}

stream {
  healthcheck fall=2 rise=1 interval=60 timeout=10000;
  healthcheck_persistent healthcheck;

  healthcheck_disable_host 127.0.2.1:8000;
  healthcheck_disable_host 127.0.2.1:8001;

  upstream a {
    zone sa 128k;
    server 127.0.0.1:8000 down;
    server 127.0.1.1:8000 down;
    server 127.0.2.1:8000 down;
    check fall=2 rise=1 keepalive=10 interval=10 timeout=10000;
    check_request_body "ping\n";
    check_response_body pong;
  }

  upstream b {
    zone sb 128k;
    server 127.0.0.1:8001 down;
    server 127.0.1.1:8001 down;
    server 127.0.2.1:8001 down;
    check fall=2 rise=1 interval=10 timeout=10000;
    check_persistent off;
  }

  upstream c {
    zone sc 128k;
    server 127.0.0.1:8002 down;
    server 127.0.1.1:8002 down;
    server 127.0.2.1:8002 down;
    check_response_body hello;
  }
}
